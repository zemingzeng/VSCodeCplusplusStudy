The reason is that in a function call or similar function, the argument does not cause a sequence point (not "there was a sequence before"). For example:

1
do_work(unique_ptr<A>(new A), unique_ptr(new B));
Allows the compiler to generate code like this:

new A
New B // may be thrown!
Construct unique_ptr
Construct unique_ptr
Call do_work
If new B is thrown, you leaked A because the unique_ptr was never constructed.

Putting unique_ptr constructs into their own functions eliminates this problem because the compiler is not allowed to execute the function body at the same time (so the "new" and "construct unique_ptr" steps must be executed together).

That is, given:

1
do_work(make_unique<A>(), make_unique())
The compiler must generate code like this:

Call make_unique
Call make_unique
Call do_work
Either

Call make_unique
Call make_unique
Call do_work

--------------------------------------------------------------------------------------------------------------

在函数调用 do_work(unique_ptr<A>(new A), unique_ptr(new B)) 中，编译器必须按照以下顺序生成代码：

调用 new A
调用 unique_ptr<A> 构造函数
调用 new B
调用 unique_ptr 构造函数
调用 do_work
这是因为在函数调用时，编译器必须先计算所有的参数，然后再执行函数体。由于 unique_ptr<A>(new A) 和 unique_ptr(new B) 都是参数，因此编译器必须先计算这两个参数，然后再调用 do_work 函数。

需要注意的是，在计算参数时，编译器可以按照任何顺序计算参数。也就是说，在上面的例子中，编译器可以先调用 new A ，然后再调用 unique_ptr<A> 构造函数；也可以先调用 unique_ptr<A> 构造函数 ，然后再调用 new A。

但是，在这种情况下，使用直接初始化（direct initialization）来创建一个临时的 unique_ptr 对象可能会导致未定义行为。例如：

void do_work(unique_ptr<A> a, unique_ptr<B> b);

do_work(unique_ptr<A>(new A), unique_ptr<B>(new B));
在上面的代码中，如果编译器选择按照以下顺序计算参数：

调用 new A
调用 new B
调用第一个 unique_ptr 构造函数
调用第二个 unique_ptr 构造函数

----------------------------------------------------------------------------------------------------------------------------------

在栈展开（stack unwinding）是指，如果在一个函数内部抛出异常，而此异常并未在该函数内部被捕捉，
就将导致该函数的运行在抛出异常处结束，所有已经分配在栈上的局部变量都要被释放。

------------------------------------------------------------------------------------------------
C++11中的Lambda表达式捕获外部变量主要有以下形式：

捕获形式	说明
[]	不捕获任何外部变量
[变量名, …]	默认以值得形式捕获指定的多个外部变量（用逗号分隔），如果引用捕获，需要显示声明（使用&说明符）
[this]	以值的形式捕获this指针
[=]	以值的形式捕获所有外部变量
[&]	以引用形式捕获所有外部变量
[=, &x]	变量x以引用形式捕获，其余变量以传值形式捕获
[&, x]	变量x以值的形式捕获，其余变量以引用形式捕获

---------------------------------------------------------------------------------------------------------------------------
:1679896197709671700
:1679896251845446200

:1679896404527753400
:1679896404527753400
:1679896404527753400

:1679896458620969000
:1679896473930236600
:1524787849296817

4744832805432498669
4744832805505381433

时间us----->1679896812389262
时间us----->1679896844759609

时间us----->1679896948749804
           1679896990624006

ffplay